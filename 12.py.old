class Middler(object):
    def __init__(self, collection, l_index=0, r_index=len(collection)):
        self.collection = collection
        self.l_index = l_index
        self.r_index = r_index

    def move_left_index(self):
        old_pos = self.l_index
        self.incr_left_index()
        item = collection[self.l_index]
        compare = self.compare(item)
        if compare == 0:
            return True, item
        elif self.compare(item) > 0:
            if self.l_index < self.r_index:
                self.r_index = self.l_index
            self.l_index = old_pos
        return False, compare

    def move_right_index(self):
        old_pos = self.r_index
        self.decr_right_index()
        item = collection[self.r_index]
        compare = self.compare(item)
        if compare == 0:
            return True, item
        elif self.compare(item) < 0:
            if self.r_index > self.l_index:
                self.l_index = self.r_index
            self.r_index = old_pos
        return False, compare

    def move(self):
        found, res = self.move_left_index()
        while not Found:
            if res < 0:
                found, res = self.move_right_index()
            else:
                found, res = self.move_left_index()
        return res

class FactorCount(Middler):
    def __init__(self, factor_count, *args, *kwargs):
        super(FactorCount, self).__init__(*args, **kwargs)
        self.factor_count = factor_count

    def compare(self, item):
        num_factors = factor_count(item)
        return cmp(num_factors, self.factor_count)
